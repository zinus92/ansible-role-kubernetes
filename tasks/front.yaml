---
- ansible.builtin.include_tasks: etcdRAM_pre.yaml
  when: etcd_in_RAM

- name: Create a directory if it does not exist
  file:
    path: /etc/kubernetes/pki
    state: directory
    mode: 0755

- name: Create auth data file with an admin user
  copy:
    content: '{{ kube_admin_token }},{{ kube_admin_username }},100,"users,system:masters"'
    dest: /etc/kubernetes/pki/auth
    mode: 0600

- name: Kubeadm init
  command: kubeadm init --pod-network-cidr={{ kube_pod_network_cidr }} --token={{ kube_token }} --token-ttl {{ kube_token_ttl }} --apiserver-advertise-address={{ kube_api_server }} creates=/etc/kubernetes/admin.conf

- name: Wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: Install flannel
  block:
  - template:
      src: templates/flannel.yaml
      dest: /etc/kube-flannel.yml
  - command: kubectl apply -f /etc/kube-flannel.yml creates=/etc/cni/net.d/10-flannel.conflist
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  when: network_manager == "flannel"

- name: Install calico
  block:
  - get_url:
      url: https://projectcalico.docs.tigera.io/archive/{{ calico_version }}/manifests/calico.yaml
      dest: /etc/kube-calico.yml
  - command: kubectl apply -f /etc/kube-calico.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
  when: network_manager == "calico"

- name: Set correct endpoint for CRI
  copy:
    src: files/crictl.yaml
    dest: /etc/crictl.yaml
    mode: 0644

- ansible.builtin.include_tasks: helm.yaml
  when: kube_install_helm

#- name: Add Kube API server options
#  lineinfile:
#    path: /etc/kubernetes/manifests/kube-apiserver.yaml
#    line: '    - {{ item.option }}={{ item.value }}'
#    regexp: '^    - {{ item.option }}='
#    insertafter: '    - kube-apiserver'
#  notify: restart kubeapi
#  with_items: "{{ kube_apiserver_options }}"

- name: Wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: Set iptables for ingress floatingIPs
  block:
  - name: Delete all rules in all chains
    iptables: 
      flush: yes
  - name: 'iptables -A FORWARD -p tcp -d {{ nginx_ingress.master_private_ip }} --dport 443,80 -j ACCEPT'
    iptables:
      chain: FORWARD
      protocol: tcp
      destination: "{{ nginx_ingress.master_private_ip }}"
      destination_port: "{{ item }}"
      jump: ACCEPT
      comment: "managed by kubernetes ansible role"
    loop:
      - 443
      - 80        
  - name: 'iptables -t nat -A PREROUTING -p tcp -d {{ nginx_ingress.master_public_ip }} --dport 443,80 -j DNAT --to-destination {{ nginx_ingress.master_private_ip }}:443,80'
    iptables:
      table: nat
      chain: PREROUTING
      protocol: tcp
      destination: "{{ nginx_ingress.master_public_ip }}"
      destination_port: "{{ item }}"
      jump: DNAT
      to_destination: "{{ nginx_ingress.master_private_ip }}:{{ item }}"
      comment: "managed by kubernetes ansible role"
    loop:
      - 443
      - 80              
  - name: 'iptables -t nat -A POSTROUTING ! -s 127.0.0.1 -j MASQUERADE'
    iptables:
      table: nat     
      chain: POSTROUTING
      source: '! 127.0.0.1'
      jump: MASQUERADE
      comment: "managed by kubernetes ansible role"
  - name: save iptable configuration
    command: iptables-save

- name: Wait Kube to start
  wait_for:
    host: "{{ kube_api_server }}"
    port: 6443

- name: Collect NotReady nodes
  ansible.builtin.shell: "kubectl get nodes | grep NotReady | grep -v vnode-0 | awk '{print $1}'"
  register: notready_nodes
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  failed_when: false
  changed_when: false

- name: NotReady nodes
  ansible.builtin.debug:
    msg: "NotReady nodes: {{ notready_nodes.stdout }}"

- name: Cordon nodes
  ansible.builtin.shell: "kubectl cordon {{ item }} "
  loop:
    "{{ notready_nodes.stdout.split('\n') }}"
  register: output_cordon
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: notready_nodes.stdout | length > 0

- name: Output cordon nodes
  ansible.builtin.debug:
    msg: "Cordoned nodes: {{ output_cordon }}"
  when: notready_nodes.stdout | length > 0

#- name: Drain nodes
#  ansible.builtin.shell: "kubectl drain {{ item }} --delete-emptydir-data --ignore-daemonsets --force"
#  loop:
#    "{{ notready_nodes.stdout.split('\n') }}"
#  environment:
#    KUBECONFIG: /etc/kubernetes/admin.conf
#  register: output_drain
#  when: notready_nodes.stdout | length > 0

#- name: Output drain nodes
#  ansible.builtin.debug:
#    msg: "Drain nodes: {{ output_drain }}"
#  when: notready_nodes.stdout | length > 0

- name: Delete NotReady nodes
  ansible.builtin.shell: "kubectl delete node {{ item }} "
  loop:
    "{{ notready_nodes.stdout.split('\n') }}"
  register: output_delete
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  when: notready_nodes.stdout | length > 0

- name: Output node deletion
  ansible.builtin.debug:
    msg: "Deleted nodes: {{ output_delete }}"
  when: notready_nodes.stdout | length > 0

- ansible.builtin.include_tasks: software-installation.yaml

- name: Expose apiserver through ingress
  block:
  - template:
      src: templates/api-server-ingress.yaml
      dest: /etc/api-server-ingress.yaml
  - command: kubectl apply -f /etc/api-server-ingress.yaml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

- name: Create service account for remote access
  block:
  - copy:
      src: files/kubeconfig
      dest: /etc/kubeconfig
  - copy:
      src: files/admin-cred.yaml
      dest: /etc/admin-cred.yml
  - shell: |
      kubectl apply -f /etc/admin-cred.yml
      kubectl create --dry-run=client clusterrolebinding add-on-cluster-admin --clusterrole=cluster-admin --serviceaccount=kube-system:admin -o yaml | kubectl apply -f -
      kubectl config --kubeconfig=/etc/kubeconfig set-credentials admin --token={{ kube_admin_token }}
      kubectl config --kubeconfig=/etc/kubeconfig set-cluster public --server=https://api-kubernetes.{{ dns_name }} --insecure-skip-tls-verify
      kubectl config --kubeconfig=/etc/kubeconfig set-context public --cluster=public --namespace=default --user=admin
      kubectl config --kubeconfig=/etc/kubeconfig use-context public
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

- name: Register kubeconfig
  shell: kubectl config --kubeconfig=/etc/kubeconfig view --raw
  register: kubeconfig
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf

- name: KUBECONFIG file
  debug:
    var: kubeconfig.stdout.split('\n')

- ansible.builtin.include_tasks: etcdRAM_backup.yaml
  when: etcd_in_RAM
