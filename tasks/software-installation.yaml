---
- name: Check if ingress-nginx is already installed
  ansible.builtin.shell: "helm list -a -n ingress-nginx"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: ingress_nginx_present

- name: Install nginx ingress
  when: nginx_ingress.enabled and ('ingress-nginx' not in ingress_nginx_present.stdout)
  block:  
  - template:
      src: templates/nginx-values.yaml
      dest: /etc/nginx-ingress-values.yml
  - command: "{{ item }}"
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    with_items:
      - helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
      - helm repo update
      - "helm install ingress-nginx ingress-nginx/ingress-nginx  --atomic --set controller.allowSnippetAnnotations=false \
        -n ingress-nginx --create-namespace --version {{ nginx_ingress_helm_version }} --values /etc/nginx-ingress-values.yml"
  
- name: Check if cert-manager is already installed
  ansible.builtin.shell: "helm list -a -n cert-manager"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: cert_manager_present

- name: Install cert manager
  when: nginx_ingress.enabled and ('cert-manager' not in cert_manager_present.stdout)
  command: "{{ item }}"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  with_items:
    - helm repo add jetstack https://charts.jetstack.io
    - helm repo update
    - "helm install cert-manager jetstack/cert-manager --atomic -n cert-manager --create-namespace --version {{ cert_manager_helm_version }} --set installCRDs=true"
 
- name: Wait Cert-Manager to start
  command: kubectl get deployment -n cert-manager -l 'app=webhook' -o 'jsonpath={.items[0].status.readyReplicas}'
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: cert_manager_webhook_deployment_status
  until: (cert_manager_webhook_deployment_status.stdout | default(0) | int) >= 1
  retries: 30
  delay: 15
  when: nginx_ingress.enabled

- name: Define cluster issuer
  block:
  - template:
      src: templates/cluster-certs.yaml
      dest: /etc/cluster-certs.yml 
  - command: kubectl apply -f /etc/cluster-certs.yml
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf

- name: Check if dashboard is already installed
  ansible.builtin.shell: "helm list -a -n kube-system"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: dashboard_present

- name: Install dashboard
  when: nginx_ingress.enabled and ('dashboard' not in dashboard_present.stdout)
  block:
  - copy:
      src: files/metric-server.yaml
      dest: /etc/metric-server.yml
  - template:
      src: templates/dashboard-values.yaml
      dest: /etc/dashboard-values.yml
  - command: "{{ item }}"
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    with_items:
      - helm repo add kubernetes-dashboard https://kubernetes.github.io/dashboard/
      - helm repo update
      - kubectl apply -f /etc/metric-server.yml
      - "helm install dashboard kubernetes-dashboard/kubernetes-dashboard --atomic -n kube-system --version {{ dashboard_helm_version }} --values /etc/dashboard-values.yml"
  
- name: Check if prometheus is already installed
  ansible.builtin.shell: "helm list -a -n prometheus"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: prometheus_present

- name: Install prometheus
  when: (nginx_ingress.enabled) and ('prometheus' not in prometheus_present.stdout)
  block:
  - template:
      src: templates/prometheus-values.yaml
      dest: /etc/prometheus-values.yml
  - command: "{{ item }}"
    environment:
      KUBECONFIG: /etc/kubernetes/admin.conf
    with_items:
      - helm repo add prometheus https://prometheus-community.github.io/helm-charts
      - helm repo update
      - "helm install prometheus prometheus/prometheus --atomic -n prometheus --create-namespace --version {{ prometheus_helm_version }} --values /etc/prometheus-values.yml"

- name: Check if kube-eagle is already installed
  ansible.builtin.shell: "helm list -a -n kube-eagle"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: kube_eagle_present

- name: Install kube-eagle
  when: nginx_ingress.enabled and ('kube-eagle' not in kube_eagle_present.stdout)
  ansible.builtin.command: "{{ item }}"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  with_items:
    - helm repo add kube-eagle https://raw.githubusercontent.com/cloudworkz/kube-eagle-helm-chart/master
    - helm repo update
    - "helm install kube-eagle kube-eagle/kube-eagle --atomic -n kube-eagle --create-namespace --version {{ kube_eagle_helm_version }}"

- name: Check if grafana is already installed
  ansible.builtin.shell: "helm list -a -n grafana"
  environment:
    KUBECONFIG: /etc/kubernetes/admin.conf
  register: grafana_present

- name: Install grafana
  when: nginx_ingress.enabled and ('grafana' not in grafana_present.stdout)
  block:
    - name: Copy templates/grafana-secret.yaml
      ansible.builtin.template:
        src: templates/grafana-secret.yaml
        dest: /etc/grafana-secret.yml
        mode: 0644
    - name: Copy templates/grafana-values.yaml
      ansible.builtin.template:
        src: templates/grafana-values.yaml
        dest: /etc/grafana-values.yml
        mode: 0644
    - name: Create grafana namespace
      ansible.builtin.command: kubectl create ns grafana
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
    - name: Create grafana secret
      ansible.builtin.command: kubectl apply -n grafana -f /etc/grafana-secret.yml
      register: kubectl_grafana_secret_apply
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      changed_when:
        - kubectl_grafana_secret_apply.rc == 0
    - name: Install grafana
      ansible.builtin.command: "{{ item }}"
      environment:
        KUBECONFIG: /etc/kubernetes/admin.conf
      with_items:
        - helm repo add grafana https://grafana.github.io/helm-charts
        - helm repo update
        - "helm install grafana grafana/grafana --atomic -n grafana --version {{ grafana_helm_version }} --values /etc/grafana-values.yml"
